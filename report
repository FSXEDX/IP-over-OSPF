IP-over-OSPF

1. Script 
=========

  This script creates three network namespaces (ns_left, ns_mid, ns_right) and
creates virtual ethernet pairs to connect:
- left to mid
- mid to right
- right to the root namespace

It creates tap devices:
- tap0 with address 192.168.1.1 in left
- tap0 with address 192.168.1.3 in right

IP forwarding is enabled in ns_left and in the root namespace, NAT is
enabled in the root namespace and routes are set up so that:
- left has right as its default gateway
- right has root as its default gateway
- root may NAT packets from both left and right to the Internet

To access the Internet from left:
- run an ospf router on mid, e.g. bird: sudo ./setup.sh run mid
- run the modified ospf router on left and right : sudo ./setup run mid; sudo ./setup.sh run right
- open a shell in left: sudo ./setup.sh bash left
- in this shell, you may now access the Internet! (e.g: ping 8.8.8.8)

Ethernet frames sent from the left are added to the LSA database of the modified bird router on the left 
using a tap device ; the OSPF protocol takes care of propagating this data to mid and then to right.
When these frames arrive in the LSA database on right, they are sent to a tap device and can be forwarded
to the main namespace. The IP addresses in these packets get through NAT before being sent to the Internet.

Note : DNS resolution does not work yet.


2. Modification of Bird
========================
    1. Creation of a new type of LSA : LSA_T_ETH
    ---------------------------------------------

    The high-order three bits (U, S2, S1) of LS type encode generic properties of the
   LSA. We choosed :

   U = 1. Store and flood the LSA as if the type is understood
   S2.S1 = 10. AS Scoping - Flooded throughout AS

    On proto/ospf/ospf.h :

    #define LSA_T_ETH   	0xC00F /* = 11000000000001111, LSA with ethernet payload (U.S2.S1 = 110) */

    On proto/ospf/topology.c : 

    New functions 

    void
ospf_originate_eth_lsa(struct ospf_proto *p, u8 *eth_frame_buffer, size_t frame_length)

    static void
prepare_eth_lsa_body(struct ospf_proto *p, u8 *eth_frame_buffer, size_t frame_length)


    2. Creating tap devices and deal with incoming packets in TAP interface
    -----------------------------------------------------------------------

    in sysdep/unix/io.c :

    Modifing io_loop function already existant.
    void
io_loop(void)


Sources : 
=========

RFC 5340 OSPF over IPv6



